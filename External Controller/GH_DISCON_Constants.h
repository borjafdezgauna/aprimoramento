/***********************************************************************
 *
 *  Purpose      : This header file defines a set of constants for robust
 *                 operation of the External Controller API and the internal
 *                 model interface.
 *
 *  THIS FILE IS AUTOGENERATED FROM, "DataModel.xml" AND IS NOT UNDER SOURCE CONTROL
 *
 *  Created      : 24/2/2015 using T4 template "ExternalControllerApiH.tt"
 * 
 *  Copyright    : GL Garrad Hassan 2012
 * 
 ************************************************************************/

#ifndef GH_DISCON_CONSTANTS
#define GH_DISCON_CONSTANTS


#include <float.h>    // Defines DBL_MAX

#define INFINITY (DBL_MAX+DBL_MAX)
#define NAN (INFINITY-INFINITY)
#define GH_DISCON_ERROR_STRING_LENGTH 256    // This is used to size all error strings.	
#define GH_DISCON_LEGACY_MESSAGE_STRING_LENGTH 512    // This is used to size the discon message argument for legacy controllers.	
#define GH_DISCON_LEGACY_MAXIMUM_NUMBER_LOGGING_VARS 70    // This is used to calculate the number of characters in OUTNAME for legacy controllers.	
#define GH_DISCON_LEGACY_NUMBER_MINIMUM_INFILE_LENGTH 256    // This is hard-coded into some external controllers.	
#define GH_DISCON_DLL_INTERFACE_VERSION "4.5.0.104"    // The version of this ExternalControllerApi.dll.  This will be the same as the version of Bladed that it was originally released with..	

#ifdef __cplusplus    // This statement is only necessary (and indeed valid) when compiled under C++
namespace GHTurbineInterface {
#endif


// TYPEDEFS =====================================================================================
/*! The 'turbine' is a pointer which is passed to the API so that the target model can be identified and located. */ 
typedef size_t turbine;
/*!  */ 
/// <summary>
/// The external controller DLL should expose a function named "CONTROLLER".  The function in the DLL should match the CONTROLLER_TYPEDEF, and can reference any of the API functions in this header file.
///  
///    e.g. the function specification in C:
///      extern "C" int __declspec(dllexport) __cdecl CONTROLLER (turbine turbine_id)
///  
///    or the function specification in FORTRAN:
///      INTEGER FUNCTION CONTROLLER (TURBINE)
///          USE ISO_C_BINDING
///          INTEGER(C_SIZE_T), INTENT(IN) :: TURBINE
///  
///  See documentation on external interfaces for more details.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param> 
typedef int (__cdecl   *CONTROLLER_TYPEDEF)(const turbine turbine_id);			
// ==============================================================================================

// CONSTANTS ====================================================================================
// Use these for testing the return result of functions that return integers representing states.
// GH_DISCON_RESULT    - Flag returned by simulation in response to 'Set' commands. 
static const int GH_DISCON_SUCCESS  = 0;        /**< Function executed successfully. */
static const int GH_DISCON_ERROR  = -1;        /**< An error prevented the function from completing.  Use function GetLastErrorMessage to retrieve a description of the error. */
static const int GH_DISCON_FILE_NOT_FOUND  = -404;        /**< The specified file was not found. */
static const int GH_DISCON_FUNCTION_NOT_FOUND  = -405;        /**< The specified function was not found in the specified DLL. */
static const int GH_DISCON_SIDE_BY_SIDE_ERRORS  = -406;        /**< Windows Error 14001: the side-by-side configuration information for the specified DLL contains errors.. */
static const int GH_DISCON_WARNING  = 1;        /**< A warning was generated by a subroutine. */
// GH_DISCON_CONTROLLER_STATE    - Flag returned by simulation from GetControllerState. 
static const int GH_DISCON_CONTROLLER_ERROR  = -1;        /**< The simulation has errored during this or last timestep */
static const int GH_DISCON_POWER_PRODUCTION  = 0;        /**< The simulation is in power production mode. */
static const int GH_DISCON_PARKED  = 1;        /**< The simulation is in parked mode. */
static const int GH_DISCON_IDLING  = 2;        /**< The simulation is in idling mode. */
static const int GH_DISCON_START_UP  = 3;        /**< The simulation is in start-up mode. */
static const int GH_DISCON_NORMAL_STOP  = 4;        /**< The simulation is in normal stopping mode. */
static const int GH_DISCON_EMERGENCY_STOP  = 5;        /**< The simulation is in emergency stopping mode. */
// GH_DISCON_SIMULATION_STATUS    - Flag returned by simulation from GetSimulationStatus.  Descriptions taken from the user manual. 
static const int GH_DISCON_STATUS_FINALISING  = -1;        /**< Final call at the end of the simulation. */
static const int GH_DISCON_STATUS_INITIALISING  = 0;        /**< First call at time zero. */
static const int GH_DISCON_STATUS_DISCRETE_STEP  = 1;        /**< Simulation discrete timestep. */
static const int GH_DISCON_STATUS_REALTIME  = 2;        /**< Real Time update step (for Real Time Test simulations only).  On a call with the status flag set to 2, the DLL must exchange data with the turbine controller. */
// GH_DISCON_PITCH_CONTROL    - Flag to specify whether the pitch is controlled collectively or individually. 
static const int GH_DISCON_PITCH_CONTROL_COLLECTIVE  = 0;        /**< Pitch is controlled collectively - use GetCollectivePitchAngle and SetDemandedCollectivePitchAngle. */
static const int GH_DISCON_PITCH_CONTROL_INDIVIDUAL  = 1;        /**< Pitch is controlled on each blade individually - use GetPitchAngle and SetDemandedPitchAngle. */
// GH_DISCON_YAW_CONTROL    -  Flag to represent whether the yaw is controlled by rate or torque. 
static const int GH_DISCON_YAW_CONTROL_RATE  = 0;        /**< Uses the yaw rate demand to control yaw. */
static const int GH_DISCON_YAW_CONTROL_TORQUE  = 1;        /**< Uses the yaw torque demand to control yaw. */
// GH_DISCON_GENERATOR_CONTACTOR    - Flag used in Rotor functions Get and SetGeneratorContactor.  Descriptions come from the user manual for the external controller. 
static const int GH_DISCON_GENERATOR_CONTACTOR_OFF  = 0;        /**< Off. */
static const int GH_DISCON_GENERATOR_CONTACTOR_MAIN  = 1;        /**< Main (high speed) or variable speed generator. */
static const int GH_DISCON_GENERATOR_CONTACTOR_LOW_SPEED  = 2;        /**< Low speed generator. */
// GH_DISCON_GRID_CONVERTER_D_AXIS_CONTROL_TYPE    -  
static const int GH_DISCON_GRID_CONVERTER_TERMINAL_VOLTAGE_CONTROL  = 1;        /**< Terminal voltage control. */
static const int GH_DISCON_GRID_CONVERTER_POWER_FACTOR_CONTROL  = 2;        /**< Power factor control. */
static const int GH_DISCON_GRID_CONVERTER_REACTIVE_POWER_CONTROL  = 3;        /**< Reactive power control. */
static const int GH_DISCON_GRID_CONVERTER_DAXIS_CURRENT_CONTROL  = 4;        /**< d-axis current control. */
// GH_DISCON_BRAKE_STATUS    - Flag to specify the status of the various brakes on a rotor. 
static const int GH_DISCON_BRAKE_OFF  = 0;        /**< Brake is off. */
static const int GH_DISCON_BRAKE_ON  = 1;        /**< Brake is on. */
// GH_DISCON_BRAKE    -  
static const int GH_DISCON_BRAKE_SHAFT_1  = 1;        /**< First shaft brake. */
static const int GH_DISCON_BRAKE_SHAFT_2  = 2;        /**< Second shaft brake. */
static const int GH_DISCON_BRAKE_SHAFT_3  = 4;        /**< Third shaft brake. */
static const int GH_DISCON_BRAKE_GENERATOR  = 3;        /**< Generator brake. */
static const int GH_DISCON_BRAKE_ADDITIONAL_DISCON  = 5;        /**< Additional brake torque, added to the total applied torque of all of the other brakes. */
// GH_DISCON_OVERRIDE_STATUS    - Flag used to specify whether the controller is overriding the control of yaw, torque or pitch. 
static const int GH_DISCON_OVERRIDE_OFF  = 0;        /**< Override is off. */
static const int GH_DISCON_OVERRIDE_ON  = 1;        /**< Override is on. */
// GH_DISCON_VARIABLE_SLIP_STATUS    - Flag used by Rotor's Get and SetVariableSlipStatus. 
static const int GH_DISCON_VARIABLE_SLIP_OFF  = 0;        /**< Variable slip off. */
static const int GH_DISCON_VARIABLE_SLIP_ON  = 1;        /**< Variable slip on. */
// GH_DISCON_PITCH_ACTUATOR_TYPE    - Flag to specify the actuator type of either a blade or an aileron. 
static const int GH_DISCON_PITCH_POSITION  = 0;        /**< The required actuator position is demanded. */
static const int GH_DISCON_PITCH_RATE  = 1;        /**< The required actuator rate is demanded. */
static const int GH_DISCON_PITCH_NO_ACTUATOR  = 2;        /**< There is no pitch actuator on the blade (for instance, if ailerons are used to control pitch). */
// GH_DISCON_TEETER_LOCK_FLAG    - Flag for use in function SetTeeterLock. 
static const int GH_DISCON_TEETER_UNLOCKED  = 0;        /**< Teeter lock off. */
static const int GH_DISCON_TEETER_LOCKED  = 1;        /**< Teeter lock on. */
// GH_DISCON_LOGGING_LEVEL    - Flag to set the logging level printed to the console or the log file. 
static const int GH_DISCON_LOG_SCRATCH  = 0;        /**< If level is less than this, ALL messages will be reported. */
static const int GH_DISCON_LOG_DEBUG  = 10;        /**< If level is less than this, messages down to DEBUG level will be reported. */
static const int GH_DISCON_LOG_INFO  = 20;        /**< If level is less than this, messages down to INFO level will be reported. */
static const int GH_DISCON_LOG_WARNING  = 30;        /**< If level is less than this, messages down to WARNING level will be reported. */
static const int GH_DISCON_LOG_ERROR  = 40;        /**< If level is less than this, messages down to ERROR level will be reported. */
static const int GH_DISCON_LOG_CRITICAL  = 50;        /**< If level is less than this, messages down to CRITICAL level will be reported.  If above this, then no messages will be reported (not recommended). */
// GH_DISCON_LIDAR_BEAM_COORDINATES    - Flag to define in what coordinate systems the Lidar beam is controlled. 
static const int GH_DISCON_LIDAR_BEAM_CARTESIAN  = 0;        /**< Cartesian coordinates, using Y and Z. */
static const int GH_DISCON_LIDAR_BEAM_SPHERICAL  = 1;        /**< Spherical coordinates, using azimuth and offset angles. */
// GH_DISCON_LIDAR_BEAM_CONTROL    - Flag to represent whether the Lidar beam is controlled by the external controller or not. 
static const int GH_DISCON_LIDAR_BEAM_CONTROL_DISCON  = 0;        /**< Lidar beam is expecting control instructions from the external controller. */
static const int GH_DISCON_LIDAR_BEAM_CONTROL_AUTO_CIRCULAR  = 1;        /**< Lidar beam is being controlled by the simulation, varying in a circular pattern. */
static const int GH_DISCON_LIDAR_BEAM_CONTROL_AUTO_ROSETTE  = 2;        /**< Lidar beam is being controlled by the simulation, varying in a rosette pattern. */
// GH_DISCON_LIDAR_BEAM_UPDATE    - Flag to represent whether the Lidar beam is controlled by the external controller or not. 
static const int GH_DISCON_LIDAR_BEAM_UPDATE_ON_TIMESTEP  = 0;        /**< The Lidar beam's measured velocity is updated automatically on every Lidar timestep. */
static const int GH_DISCON_LIDAR_BEAM_UPDATE_WAITING  = 1;        /**< The Lidar beam's measured velocity is updated only on request, and is currently waiting for the controller to request an update. */
static const int GH_DISCON_LIDAR_BEAM_UPDATE_REQUESTED  = 2;        /**< The Lidar beam's measured velocity is updated only on request, and this flag shows that the controller has requested the measured results to be updated on the next controller timestep. */
// GH_DISCON_LIDAR_MOUNTING    - Flag to on which component the LIDAR is mounted. 
static const int GH_DISCON_LIDAR_SUPPORT_STRUCTURE  = 0;        /**< Lidar beam is mounted on the support structure or the ground (both specified in the global coordinate system). */
static const int GH_DISCON_LIDAR_NACELLE  = 1;        /**< Lidar beam is mounted on one of the nacelles, rotating with yaw, but not with the blades. */
static const int GH_DISCON_LIDAR_HUB  = 2;        /**< Lidar beam is mounted on one of the hubs, rotating with yaw and with the blades. */
static const int GH_DISCON_LIDAR_BLADE  = 3;        /**< Lidar beam is mounted on one of the blades. */
// GH_DISCON_BOOL    - Flag to represent a boolean condition. 
static const int GH_DISCON_NO  = 0;        /**< No. */
static const int GH_DISCON_YES  = 1;        /**< Yes. */
 
// Error Values    - Enum returned by simulation from GetControllerState. 
static const int GH_DISCON_ERROR_INT  = -666;
static const double GH_DISCON_ERROR_DOUBLE  = NAN;
#pragma warning(disable:4305)    // Warning 4305 warns of implicit casts.  Unfortunately, an *explicit* cast causes an error when compiled as C code.
static const float GH_DISCON_ERROR_FLOAT  = NAN;
#pragma warning(default:4305)
static const char* const GH_DISCON_ERROR_CHAR  = "<function-returned-error>";
static const wchar_t* const GH_DISCON_ERROR_WCHAR  = L"<function-returned-error>";
static const int GH_DISCON_ERROR_STATUS  = -1;
// ==============================================================================================


#ifdef __cplusplus
}
#endif    // End of __cplusplus

#endif    // End of GH_DISCON_CONSTANTS