/***********************************************************************
*
*  Purpose      : This header file defines all of the C functions that can
*                 be used by external controllers to control the simulation.
*                 This header file can be imported either by C code (i.e.
*                 the customer's dll) or C++ code, andthere are various ifndef
*                 statements to protect C compilers from C++ specific clauses.
* 
*                 All API functions require the as their first argument a turbine
*                 typedef.  External controllers should accept this argument
*                 and return it - unchanged - as he first argument of all API
*                 calls.
*
*  THIS FILE IS AUTOGENERATED FROM, "DataModel.xml" AND IS NOT UNDER SOURCE CONTROL
*
*  Created      : 24/2/2015 using T4 template "ExternalControllerApiH.tt"
* 
*  Copyright    : GL Garrad Hassan 2012
* 
************************************************************************/

#ifndef EXTERNAL_CONTROLLER_API_H
#define EXTERNAL_CONTROLLER_API_H

#include "GH_DISCON_Constants.h"


#ifdef __cplusplus    // These statements are only necessary (and indeed valid) when compiled under C++
namespace GHTurbineInterface {

extern "C"
{
#endif


/// <summary>
/// Returns the status of the last operation performed by the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetLastErrorCode(const turbine turbine_id);

/// <summary>
/// Returns a description of the error that occurred on the last command call, or an empty string.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
const char* GetLastErrorMessage(const turbine turbine_id);

/// <summary>
/// The current version of the ExternalControllerApi.dll.  This should match the version of dtbladed.exe, retrieved using GetBladedVersion().
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
const char* GetDllInterfaceVersion(const turbine turbine_id);


/// <summary>
/// Adds a logging value, and returns the new number of logging variables.  This is called by the external controller during initialisation, to tell Bladed what values are being logged.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="name">  The name of the logging value, as it will appears in the log report.</param>
/// <param name="units">  The units of the logging value as a string.</param>
int AddLogValue(const turbine turbine_id, const char* name, const char* units);

/// <summary>
/// Returns the number of logging value set by the external controller.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfLogValues(const turbine turbine_id);

/// <summary>
/// Returns the index of the logging value of the name 'name'.  Returns -1 if the name cannot be found.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="name">  The Log_Value's internal name.</param>
int GetLogIndexFromName(const turbine turbine_id, const char* name);

/// <summary>
/// Sets the level of logging to the message file.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="logging_level">  The logging level, from 0 (everything) to 60 (nothing).</param>
int SetLoggingLevel(const turbine turbine_id, int logging_level);

/// <summary>
/// Reports a scratch message to the user.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="message">  A char pointer to a null-terminated character array.</param>
int ReportScratchMessage(const turbine turbine_id, const char* message);

/// <summary>
/// Reports a debug message to the user, prefixed by "*** DEBUG:".
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="message">  A char pointer to a null-terminated character array.</param>
int ReportDebugMessage(const turbine turbine_id, const char* message);

/// <summary>
/// Reports an info message to the user, prefixed by "*** Note:".
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="message">  A char pointer to a null-terminated character array.</param>
int ReportInfoMessage(const turbine turbine_id, const char* message);

/// <summary>
/// Reports a warning message to the user, prefixed by "*** WARNING:".
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="message">  A char pointer to a null-terminated character array.</param>
int ReportWarningMessage(const turbine turbine_id, const char* message);

/// <summary>
/// Reports an error message to the user, prefixed by "*** ERROR:".  This should be called at least once immediately before requesting program termination, explaining the reason for the termination.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="message">  A char pointer to a null-terminated character array.</param>
int ReportErrorMessage(const turbine turbine_id, const char* message);

/// <summary>
/// Reports a critical message to the user, prefixed by "*** ERROR:".
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="message">  A char pointer to a null-terminated character array.</param>
int ReportCriticalMessage(const turbine turbine_id, const char* message);

/// <summary>
/// Logs a user-specified value by name.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="name">  A char pointer to a null-terminated character array representing the field name.  This must be unique.</param>
/// <param name="variable_value">  A double value to log.</param>
int SetNamedUserVariable(const turbine turbine_id, const char* name, double variable_value);

/// <summary>
/// Returns the logged a user-specified value, indexed by name.  If the specified name has not previously been set, NaN will be returned and a warning reported.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="name">  A char pointer to a null-terminated character array representing the field name.  This must already have been set.</param>
double GetNamedUserVariable(const turbine turbine_id, const char* name);

/// <summary>
/// Logs a user-specified value, added at the end of the list.  Returns the index of the new user variable (i.e. the new size of the array minus 1).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="variable_value">  A double value to log.</param>
int AppendIndexedUserVariable(const turbine turbine_id, double variable_value);

/// <summary>
/// Logs a user-specified value by index.  Returns an error if the index is out of range.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  An integer designating the 'slot number' of the value to be stored to.</param>
/// <param name="variable_value">  A double value to log.</param>
int SetIndexedUserVariable(const turbine turbine_id, int index, double variable_value);

/// <summary>
/// Returns the logged user-specified value at position 'index'.  If the specified index has not previously been set, NaN will be returned and a warning reported.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  An integer designating the 'slot number' of the value to be retrieved.</param>
double GetIndexedUserVariable(const turbine turbine_id, int index);

/// <summary>
/// Returns the number of logged user-specified values.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfIndexedUserVariables(const turbine turbine_id);

/// <summary>
/// Clears all indexed user variables.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int ClearIndexedUserVariables(const turbine turbine_id);

/// <summary>
/// Returns the failure flag that the simulation is imposing on the external controller (0 for error-free running).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetControllerFailureFlag(const turbine turbine_id);

/// <summary>
/// Returns the status of the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetSimulationStatus(const turbine turbine_id);

/// <summary>
/// Returns the current time in the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetCurrentTime(const turbine turbine_id);

/// <summary>
/// Returns the time step of the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetCommunicationInterval(const turbine turbine_id);

/// <summary>
/// Returns the real time step of the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetRealTimeSimulationTimeStep(const turbine turbine_id);

/// <summary>
/// Returns the real time step multiplier of the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetRealTimeSimulationTimeStepMultiplier(const turbine turbine_id);

/// <summary>
/// Returns the settling time of the simulation in s, before data starts being collected.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetSettlingTime(const turbine turbine_id);

/// <summary>
/// Returns filepath of the INFILE.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
const char* GetInfileFilepath(const turbine turbine_id);

/// <summary>
/// Returns length of the INFILE filepath.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetInfileFilepathLength(const turbine turbine_id);

/// <summary>
/// Returns filepath of the OUTNAME.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
const char* GetOutnameFilepath(const turbine turbine_id);

/// <summary>
/// Returns length of the OUTNAME filepath.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetOutnameFilepathLength(const turbine turbine_id);

/// <summary>
/// Returns The version of Bladed, in the format 'x.x.x.x'.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
const char* GetBladedVersion(const turbine turbine_id);

/// <summary>
/// Sets the increment in the mean speed of the flow.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="speed">  Speed, in m/s.</param>
int SetMeanFlowSpeedIncrement(const turbine turbine_id, double speed);

/// <summary>
/// Sets the turbulence intensity increment.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="percentage">  Percentage.</param>
int SetTurbulenceIntensityIncrement(const turbine turbine_id, double percentage);

/// <summary>
/// Sets the flow direction increment.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="angle">  Angle, in rad.</param>
int SetFlowDirectionIncrement(const turbine turbine_id, double angle);

/// <summary>
/// Sets whether the hardware-related functions are active.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="is_hardware_in_loop">  Whether hardware is in the loop: 0=NO, 1=YES.</param>
int SetHardwareInLoop(const turbine turbine_id, int is_hardware_in_loop);

/// <summary>
/// Returns the number of rotors in the model.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfRotors(const turbine turbine_id);

/// <summary>
/// Returns the number of nacelles in the model.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfNacelles(const turbine turbine_id);

/// <summary>
/// Returns the number of hubs in the model.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfHubs(const turbine turbine_id);

/// <summary>
/// Returns the mean speed of the flow at the point the controller starts up.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetNominalStartFlowSpeed(const turbine turbine_id);

/// <summary>
/// Returns The active safety system number.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetActiveSafetySystemNumber(const turbine turbine_id);

/// <summary>
/// Sets the active safety system number.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="safety_system">  </param>
int SetActiveSafetySystemNumber(const turbine turbine_id, int safety_system);

/// <summary>
/// Returns the network voltage disturbance factor.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetNetworkVoltageDisturbanceFactor(const turbine turbine_id);

/// <summary>
/// Returns the network frequency disturbance factor.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetNetworkFrequencyDisturbanceFactor(const turbine turbine_id);

/// <summary>
/// Returns the number of strain gauges on the tower.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfTurbineStrainGauges(const turbine turbine_id);

/// <summary>
/// Returns the number of strain gauges on the tower.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfTurbineAccelerometers(const turbine turbine_id);

/// <summary>
/// Returns the number of active dampers on the turbine.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfTurbineActiveDampers(const turbine turbine_id);

/// <summary>
/// Returns the number of Lidar beams on the model.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfLidarBeams(const turbine turbine_id);

/// <summary>
/// Returns The active safety system number for the rotor (if individual rotor safety systems are being).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetRotorActiveSafetySystemNumberOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The active safety system number for the rotor (if individual rotor safety systems are being).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetRotorActiveSafetySystemNumber(const turbine turbine_id);

/// <summary>
/// Sets the active safety system number for the rotor (if individual rotor safety systems are being).  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="safety_system">  </param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetRotorActiveSafetySystemNumberOnNacelleN(const turbine turbine_id, int safety_system, int index_nacelle);

/// <summary>
/// Sets the active safety system number for the rotor (if individual rotor safety systems are being).  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="safety_system">  </param>
int SetRotorActiveSafetySystemNumber(const turbine turbine_id, int safety_system);

/// <summary>
/// Returns an integer representing the current state of the controller:  -1=CONTROLLER_ERROR;  0=POWER_PRODUCTION;  1=PARKED;  2=IDLING;  3=START_UP;  4=NORMAL_STOP;  5=EMERGENCY_STOP
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetControllerStateOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns an integer representing the current state of the controller:  -1=CONTROLLER_ERROR;  0=POWER_PRODUCTION;  1=PARKED;  2=IDLING;  3=START_UP;  4=NORMAL_STOP;  5=EMERGENCY_STOP
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetControllerState(const turbine turbine_id);

/// <summary>
/// Returns the optimal mode gain, in Nm/(rad/s)2.  This is valid for variable-speed controllers only.  If the number of points on the speed:torque curve is greater than 0 (see GetNumberOfGeneratorSpeedTorqueValues), the speed:torque curve is to be used instead, and the optimal mode gain will be 0.0.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetOptimalModeGainOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the optimal mode gain, in Nm/(rad/s)2.  This is valid for variable-speed controllers only.  If the number of points on the speed:torque curve is greater than 0 (see GetNumberOfGeneratorSpeedTorqueValues), the speed:torque curve is to be used instead, and the optimal mode gain will be 0.0.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetOptimalModeGain(const turbine turbine_id);

/// <summary>
/// Returns the minimum generator speed, in rad/s.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMinimumGeneratorSpeedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the minimum generator speed, in rad/s.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMinimumGeneratorSpeed(const turbine turbine_id);

/// <summary>
/// Returns the optimal mode maximum speed, in rad/s.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetOptimalModeMaximumSpeedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the optimal mode maximum speed, in rad/s.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetOptimalModeMaximumSpeed(const turbine turbine_id);

/// <summary>
/// Returns the rotor's reference generator speed, when the turbine is operating above its rated flow speed, in rad/s.  This is valid for pitch-regulated, variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetReferenceGeneratorSpeedAboveRatedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the rotor's reference generator speed, when the turbine is operating above its rated flow speed, in rad/s.  This is valid for pitch-regulated, variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetReferenceGeneratorSpeedAboveRated(const turbine turbine_id);

/// <summary>
/// Returns the rotor's reference generator torque, when the turbine is operating above its rated flow speed, in Nm.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetReferenceGeneratorTorqueAboveRatedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the rotor's reference generator torque, when the turbine is operating above its rated flow speed, in Nm.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetReferenceGeneratorTorqueAboveRated(const turbine turbine_id);

/// <summary>
/// Returns The current override status:    0=OFF, 1=ON
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetTorqueOverrideStatusOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The current override status:    0=OFF, 1=ON
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetTorqueOverrideStatus(const turbine turbine_id);

/// <summary>
/// Sets the current override status:    0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="override_status">  The current override status:    0=OFF, 1=ON</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetTorqueOverrideStatusOnNacelleN(const turbine turbine_id, int override_status, int index_nacelle);

/// <summary>
/// Sets the current override status:    0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="override_status">  The current override status:    0=OFF, 1=ON</param>
int SetTorqueOverrideStatus(const turbine turbine_id, int override_status);

/// <summary>
/// Returns the power currently demanded of the rotor by the controller, in W.  This is not valid for variable-speed, pitch-regulated controllers.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetDemandedPowerOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the power currently demanded of the rotor by the controller, in W.  This is not valid for variable-speed, pitch-regulated controllers.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedPower(const turbine turbine_id);

/// <summary>
/// Returns The demanded speed, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetDemandedGeneratorSpeedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The demanded speed, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedGeneratorSpeed(const turbine turbine_id);

/// <summary>
/// Sets the demanded speed, in rad/s.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="speed">  The demanded speed, in rad/s.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double SetDemandedGeneratorSpeedOnNacelleN(const turbine turbine_id, double speed, int index_nacelle);

/// <summary>
/// Sets the demanded speed, in rad/s.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="speed">  The demanded speed, in rad/s.</param>
double SetDemandedGeneratorSpeed(const turbine turbine_id, double speed);

/// <summary>
/// Returns The demanded torque, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetDemandedGeneratorTorqueOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The demanded torque, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedGeneratorTorque(const turbine turbine_id);

/// <summary>
/// Sets the demanded torque, in Nm.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The demanded torque, in Nm.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedGeneratorTorqueOnNacelleN(const turbine turbine_id, double torque, int index_nacelle);

/// <summary>
/// Sets the demanded torque, in Nm.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The demanded torque, in Nm.</param>
int SetDemandedGeneratorTorque(const turbine turbine_id, double torque);

/// <summary>
/// Returns The generator contactor: 0=OFF, 1=MAIN, 2=LOW SPEED.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetGeneratorContactorOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The generator contactor: 0=OFF, 1=MAIN, 2=LOW SPEED.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetGeneratorContactor(const turbine turbine_id);

/// <summary>
/// Sets the generator contactor: 0=OFF, 1=MAIN, 2=LOW SPEED.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="generator_contactor">  The generator contactor: 0=OFF, 1=MAIN, 2=LOW SPEED.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetGeneratorContactorOnNacelleN(const turbine turbine_id, int generator_contactor, int index_nacelle);

/// <summary>
/// Sets the generator contactor: 0=OFF, 1=MAIN, 2=LOW SPEED.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="generator_contactor">  The generator contactor: 0=OFF, 1=MAIN, 2=LOW SPEED.</param>
int SetGeneratorContactor(const turbine turbine_id, int generator_contactor);

/// <summary>
/// Sets the startup resistance, in ohm/phase.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="resistance">  The startup resistance, in ohm/phase.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetGeneratorStartupResistanceOnNacelleN(const turbine turbine_id, double resistance, int index_nacelle);

/// <summary>
/// Sets the startup resistance, in ohm/phase.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="resistance">  The startup resistance, in ohm/phase.</param>
int SetGeneratorStartupResistance(const turbine turbine_id, double resistance);

/// <summary>
/// Returns The current variable slip status:    0=OFF, 1=ON
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetVariableSlipStatusOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The current variable slip status:    0=OFF, 1=ON
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetVariableSlipStatus(const turbine turbine_id);

/// <summary>
/// Sets the current variable slip status:    0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="variable_slip_status">  The current variable slip status:    0=OFF, 1=ON</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetVariableSlipStatusOnNacelleN(const turbine turbine_id, int variable_slip_status, int index_nacelle);

/// <summary>
/// Sets the current variable slip status:    0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="variable_slip_status">  The current variable slip status:    0=OFF, 1=ON</param>
int SetVariableSlipStatus(const turbine turbine_id, int variable_slip_status);

/// <summary>
/// Returns The variable slip current demand, in Amps.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetDemandedVariableSlipCurrentOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns The variable slip current demand, in Amps.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedVariableSlipCurrent(const turbine turbine_id);

/// <summary>
/// Sets the variable slip current demand, in Amps.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="current">  The variable slip current demand, in Amps.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedVariableSlipCurrentOnNacelleN(const turbine turbine_id, double current, int index_nacelle);

/// <summary>
/// Sets the variable slip current demand, in Amps.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="current">  The variable slip current demand, in Amps.</param>
int SetDemandedVariableSlipCurrent(const turbine turbine_id, double current);

/// <summary>
/// Returns the number of entries in the generator speed/torque lookup table.  If the number of points is greater than 0, the speed:torque curve is to be used, and the optimal mode gain will be 0.0.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetNumberOfGeneratorSpeedTorqueValuesOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the number of entries in the generator speed/torque lookup table.  If the number of points is greater than 0, the speed:torque curve is to be used, and the optimal mode gain will be 0.0.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfGeneratorSpeedTorqueValues(const turbine turbine_id);

/// <summary>
/// Returns the generator speed at the specified locus on the speed/torque look-up table.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  The index of the locus in the table.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetGeneratorLookupTableSpeedValueOnNacelleN(const turbine turbine_id, int index, int index_nacelle);

/// <summary>
/// Returns the generator speed at the specified locus on the speed/torque look-up table.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  The index of the locus in the table.</param>
double GetGeneratorLookupTableSpeedValue(const turbine turbine_id, int index);

/// <summary>
/// Returns the generator torque at the specified locus on the speed/torque look-up table.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  The index of the locus in the table.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetGeneratorLookupTableTorqueValueOnNacelleN(const turbine turbine_id, int index, int index_nacelle);

/// <summary>
/// Returns the generator torque at the specified locus on the speed/torque look-up table.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  The index of the locus in the table.</param>
double GetGeneratorLookupTableTorqueValue(const turbine turbine_id, int index);

/// <summary>
/// Returns the size of the vector.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetNumberOfDrivetrainBrakeStatusOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the size of the vector.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfDrivetrainBrakeStatus(const turbine turbine_id);

/// <summary>
/// Returns the current status of the brakes on the drivetrain:  GH_DISCON_BRAKE_SHAFT_1 (1) = The first shaft brake;  GH_DISCON_BRAKE_SHAFT_2 (2) = The second shaft brake;  GH_DISCON_BRAKE_GENERATOR (3) = The generator brake;  GH_DISCON_BRAKE_SHAFT_3 (4) = The third shaft brake;  GH_DISCON_BRAKE_ADDITIONAL_DISCON (5) = The additional brake torque set by the controller.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  The index of the element in the vector.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetDrivetrainBrakeStatusOnNacelleN(const turbine turbine_id, int index, int index_nacelle);

/// <summary>
/// Returns the current status of the brakes on the drivetrain:  GH_DISCON_BRAKE_SHAFT_1 (1) = The first shaft brake;  GH_DISCON_BRAKE_SHAFT_2 (2) = The second shaft brake;  GH_DISCON_BRAKE_GENERATOR (3) = The generator brake;  GH_DISCON_BRAKE_SHAFT_3 (4) = The third shaft brake;  GH_DISCON_BRAKE_ADDITIONAL_DISCON (5) = The additional brake torque set by the controller.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index">  The index of the element in the vector.</param>
int GetDrivetrainBrakeStatus(const turbine turbine_id, int index);

/// <summary>
/// Sets the current status of the brakes on the drivetrain:  GH_DISCON_BRAKE_SHAFT_1 (1) = The first shaft brake;  GH_DISCON_BRAKE_SHAFT_2 (2) = The second shaft brake;  GH_DISCON_BRAKE_GENERATOR (3) = The generator brake;  GH_DISCON_BRAKE_SHAFT_3 (4) = The third shaft brake;  GH_DISCON_BRAKE_ADDITIONAL_DISCON (5) = The additional brake torque set by the controller.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="brake_status">  The status of the nth brake:
///   GH_DISCON_BRAKE_OFF (0) - brake off
///   GH_DISCON_BRAKE_ON (1) - brake on</param>
/// <param name="index">  The index of the element in the vector.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDrivetrainBrakeStatusOnNacelleN(const turbine turbine_id, int brake_status, int index, int index_nacelle);

/// <summary>
/// Sets the current status of the brakes on the drivetrain:  GH_DISCON_BRAKE_SHAFT_1 (1) = The first shaft brake;  GH_DISCON_BRAKE_SHAFT_2 (2) = The second shaft brake;  GH_DISCON_BRAKE_GENERATOR (3) = The generator brake;  GH_DISCON_BRAKE_SHAFT_3 (4) = The third shaft brake;  GH_DISCON_BRAKE_ADDITIONAL_DISCON (5) = The additional brake torque set by the controller.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="brake_status">  The status of the nth brake:
///   GH_DISCON_BRAKE_OFF (0) - brake off
///   GH_DISCON_BRAKE_ON (1) - brake on</param>
/// <param name="index">  The index of the element in the vector.</param>
int SetDrivetrainBrakeStatus(const turbine turbine_id, int brake_status, int index);

/// <summary>
/// Returns the torque to be added to the total brake torque from all other brakes.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetDemandedAdditionalBrakeTorqueOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the torque to be added to the total brake torque from all other brakes.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedAdditionalBrakeTorque(const turbine turbine_id);

/// <summary>
/// Sets the torque to be added to the total brake torque from all other brakes.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The additional brake torque, in Nm.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedAdditionalBrakeTorqueOnNacelleN(const turbine turbine_id, double torque, int index_nacelle);

/// <summary>
/// Sets the torque to be added to the total brake torque from all other brakes.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The additional brake torque, in Nm.</param>
int SetDemandedAdditionalBrakeTorque(const turbine turbine_id, double torque);

/// <summary>
/// Returns the grid-side converter d-axis control type
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetGridConverterdAxisControlTypeOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the grid-side converter d-axis control type
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetGridConverterdAxisControlType(const turbine turbine_id);

/// <summary>
/// Sets the grid-side converter d-axis control type.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="control_type">  Control type
/// 1 = terminal voltage control
/// 2 = power factor control
/// 3 = reactive power control
/// 4 = d-axis current control
/// </param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetGridConverterdAxisControlTypeOnNacelleN(const turbine turbine_id, int control_type, int index_nacelle);

/// <summary>
/// Sets the grid-side converter d-axis control type.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="control_type">  Control type
/// 1 = terminal voltage control
/// 2 = power factor control
/// 3 = reactive power control
/// 4 = d-axis current control
/// </param>
int SetGridConverterdAxisControlType(const turbine turbine_id, int control_type);

/// <summary>
/// Returns the grid-side converter d-axis control reference value
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetGridConverterdAxisControlReferenceOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the grid-side converter d-axis control reference value
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetGridConverterdAxisControlReference(const turbine turbine_id);

/// <summary>
/// Sets the grid-side converter d-axis control reference value.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="reference_value">  d-axis control reference value</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetGridConverterdAxisControlReferenceOnNacelleN(const turbine turbine_id, double reference_value, int index_nacelle);

/// <summary>
/// Sets the grid-side converter d-axis control reference value.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="reference_value">  d-axis control reference value</param>
int SetGridConverterdAxisControlReference(const turbine turbine_id, double reference_value);

/// <summary>
/// Returns the current yaw control type: 0=RATE CONTROL, 1=TORQUE CONTROL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetYawControlOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the current yaw control type: 0=RATE CONTROL, 1=TORQUE CONTROL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetYawControl(const turbine turbine_id);

/// <summary>
/// Sets whether the yaw rate calculation will be overriden with a specified yaw torque: 0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="override_rate_with_torque">  Whether the yaw rate calculation will be overriden with a specified yaw torque: 0=OFF, 1=ON.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetOverrideYawRateWithTorqueOnNacelleN(const turbine turbine_id, int override_rate_with_torque, int index_nacelle);

/// <summary>
/// Sets whether the yaw rate calculation will be overriden with a specified yaw torque: 0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="override_rate_with_torque">  Whether the yaw rate calculation will be overriden with a specified yaw torque: 0=OFF, 1=ON.</param>
int SetOverrideYawRateWithTorque(const turbine turbine_id, int override_rate_with_torque);

/// <summary>
/// Sets the demanded yaw actuator torque.  This is only valid when either the yaw control is 'torque', or override_yaw_rate_with_torque=1.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The demanded torque, in Nm.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedYawActuatorTorqueOnNacelleN(const turbine turbine_id, double torque, int index_nacelle);

/// <summary>
/// Sets the demanded yaw actuator torque.  This is only valid when either the yaw control is 'torque', or override_yaw_rate_with_torque=1.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The demanded torque, in Nm.</param>
int SetDemandedYawActuatorTorque(const turbine turbine_id, double torque);

/// <summary>
/// Sets the demanded yaw rate of the nacelle itself (as opposed to the motor rate).  This is only valid when the yaw control is 'rate', and override_yaw_rate_with_torque=0.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="rate">  The demanded rate, in rad/s.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedYawRateOnNacelleN(const turbine turbine_id, double rate, int index_nacelle);

/// <summary>
/// Sets the demanded yaw rate of the nacelle itself (as opposed to the motor rate).  This is only valid when the yaw control is 'rate', and override_yaw_rate_with_torque=0.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="rate">  The demanded rate, in rad/s.</param>
int SetDemandedYawRate(const turbine turbine_id, double rate);

/// <summary>
/// Sets whether the yaw stiffness will be used in conjunction with the yaw rate: 0=OFF, 1=ON.  ONLY USED WITH FLEXIBLE YAW WITH NO TORQUE OVERRIDE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="use_yaw_stiffness">  Integer representing override state: 0=OFF, 1=ON.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetUseYawStiffnessOnNacelleN(const turbine turbine_id, int use_yaw_stiffness, int index_nacelle);

/// <summary>
/// Sets whether the yaw stiffness will be used in conjunction with the yaw rate: 0=OFF, 1=ON.  ONLY USED WITH FLEXIBLE YAW WITH NO TORQUE OVERRIDE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="use_yaw_stiffness">  Integer representing override state: 0=OFF, 1=ON.</param>
int SetUseYawStiffness(const turbine turbine_id, int use_yaw_stiffness);

/// <summary>
/// Sets the yaw stiffness.  This is only valid when the yaw is controlled by rate, and use_yaw_damping=1.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="stiffness">  The stiffness.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetYawStiffnessOnNacelleN(const turbine turbine_id, double stiffness, int index_nacelle);

/// <summary>
/// Sets the yaw stiffness.  This is only valid when the yaw is controlled by rate, and use_yaw_damping=1.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="stiffness">  The stiffness.</param>
int SetYawStiffness(const turbine turbine_id, double stiffness);

/// <summary>
/// Sets whether the yaw damping will be used in conjunction with the yaw rate: 0=OFF, 1=ON.  ONLY USED WITH FLEXIBLE YAW WITH NO TORQUE OVERRIDE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="use_yaw_damping">  Integer representing override state: 0=OFF, 1=ON.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetUseYawDampingOnNacelleN(const turbine turbine_id, int use_yaw_damping, int index_nacelle);

/// <summary>
/// Sets whether the yaw damping will be used in conjunction with the yaw rate: 0=OFF, 1=ON.  ONLY USED WITH FLEXIBLE YAW WITH NO TORQUE OVERRIDE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="use_yaw_damping">  Integer representing override state: 0=OFF, 1=ON.</param>
int SetUseYawDamping(const turbine turbine_id, int use_yaw_damping);

/// <summary>
/// Sets the yaw damping.  This is only valid when the yaw is controlled by rate, and use_yaw_damping=1.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="damping">  The damping.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetYawDampingOnNacelleN(const turbine turbine_id, double damping, int index_nacelle);

/// <summary>
/// Sets the yaw damping.  This is only valid when the yaw is controlled by rate, and use_yaw_damping=1.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="damping">  The damping.</param>
int SetYawDamping(const turbine turbine_id, double damping);

/// <summary>
/// Sets the demanded brake torque, in Nm.  This is treated as additional yaw bearing friction.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The demanded brake torque, in Nm.  This is treated as additional yaw bearing friction.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedYawBrakeTorqueOnNacelleN(const turbine turbine_id, double torque, int index_nacelle);

/// <summary>
/// Sets the demanded brake torque, in Nm.  This is treated as additional yaw bearing friction.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="torque">  The demanded brake torque, in Nm.  This is treated as additional yaw bearing friction.</param>
int SetDemandedYawBrakeTorque(const turbine turbine_id, double torque);

/// <summary>
/// Returns the measured shaft power of the rotor, in W.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredShaftPowerOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the measured shaft power of the rotor, in W.  This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredShaftPower(const turbine turbine_id);

/// <summary>
/// Returns the measured rotor speed, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredRotorSpeedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the measured rotor speed, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredRotorSpeed(const turbine turbine_id);

/// <summary>
/// Returns the measured electrical power output of the rotor.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredElectricalPowerOutputOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the measured electrical power output of the rotor.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredElectricalPowerOutput(const turbine turbine_id);

/// <summary>
/// Returns the measured generator speed in rad/s.    This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredGeneratorSpeedOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the measured generator speed in rad/s.    This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredGeneratorSpeed(const turbine turbine_id);

/// <summary>
/// Returns the measured generator torque, in Nm.    This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredGeneratorTorqueOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the measured generator torque, in Nm.    This is valid for variable-speed controllers only.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredGeneratorTorque(const turbine turbine_id);

/// <summary>
/// Returns the angular position of the yaw bearing.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawBearingAngularPositionOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the angular position of the yaw bearing.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawBearingAngularPosition(const turbine turbine_id);

/// <summary>
/// Returns the angular velocity of the yaw bearing.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawBearingAngularVelocityOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the angular velocity of the yaw bearing.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawBearingAngularVelocity(const turbine turbine_id);

/// <summary>
/// Returns the angular acceleration of the yaw bearing.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawBearingAngularAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the angular acceleration of the yaw bearing.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawBearingAngularAcceleration(const turbine turbine_id);

/// <summary>
/// Returns the yaw motor measured rate.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawMotorRateOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the yaw motor measured rate.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawMotorRate(const turbine turbine_id);

/// <summary>
/// Returns the measured yaw error, in rad.  4. This is based on free flow at hub position - there is no modelling of actual nacelle anemometer or pitot tube.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawErrorOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the measured yaw error, in rad.  4. This is based on free flow at hub position - there is no modelling of actual nacelle anemometer or pitot tube.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawError(const turbine turbine_id);

/// <summary>
/// Returns the angle of the nacelle, in rad from North.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredNacelleAngleFromNorthOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the angle of the nacelle, in rad from North.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredNacelleAngleFromNorth(const turbine turbine_id);

/// <summary>
/// Returns the fore-aft acceleration of the nacelle at the top of the tower, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredTowerTopForeAftAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the fore-aft acceleration of the nacelle at the top of the tower, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredTowerTopForeAftAcceleration(const turbine turbine_id);

/// <summary>
/// Returns the side-to-side acceleration of the nacelle at the top of the tower, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredTowerTopSideSideAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the side-to-side acceleration of the nacelle at the top of the tower, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredTowerTopSideSideAcceleration(const turbine turbine_id);

/// <summary>
/// Returns the torque of the shaft around the nacelle's x-axis, in Nm
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredShaftTorqueOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the torque of the shaft around the nacelle's x-axis, in Nm
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredShaftTorque(const turbine turbine_id);

/// <summary>
/// Returns the pitching/normal moment on the yaw bearing, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawBearingMyOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the pitching/normal moment on the yaw bearing, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawBearingMy(const turbine turbine_id);

/// <summary>
/// Returns the yawing moment on the yaw bearing, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredYawBearingMzOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the yawing moment on the yaw bearing, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredYawBearingMz(const turbine turbine_id);

/// <summary>
/// Returns the acceleration of the nacelle around the shaft's axis, in rad/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredNacelleRollAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the acceleration of the nacelle around the shaft's axis, in rad/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredNacelleRollAcceleration(const turbine turbine_id);

/// <summary>
/// Returns the acceleration of the nacelle around the horizontal axis normal to the shaft's axis, in rad/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredNacelleNoddingAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the acceleration of the nacelle around the horizontal axis normal to the shaft's axis, in rad/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredNacelleNoddingAcceleration(const turbine turbine_id);

/// <summary>
/// Returns the acceleration of the nacelle around the vertical axis, in rad/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredNacelleYawAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the acceleration of the nacelle around the vertical axis, in rad/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredNacelleYawAcceleration(const turbine turbine_id);

/// <summary>
/// Returns the teeter angle of the nacelle, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredTeeterAngleOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the teeter angle of the nacelle, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredTeeterAngle(const turbine turbine_id);

/// <summary>
/// Returns the  teeter velocity of the nacelle, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredTeeterVelocityOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the  teeter velocity of the nacelle, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredTeeterVelocity(const turbine turbine_id);

/// <summary>
/// Returns the number of active dampers on the nacelle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int GetNumberOfNacelleActiveDampersOnNacelleN(const turbine turbine_id, int index_nacelle);

/// <summary>
/// Returns the number of active dampers on the nacelle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfNacelleActiveDampers(const turbine turbine_id);

/// <summary>
/// Returns the acceleration being measured by the active damper, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle_active_damper">  Index of nacelle active damper, starting at 0.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
double GetMeasuredNacelleActiveDamperAccelerationOnNacelleN(const turbine turbine_id, int index_nacelle_active_damper, int index_nacelle);

/// <summary>
/// Returns the acceleration being measured by the active damper, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle_active_damper">  Index of nacelle active damper, starting at 0.</param>
double GetMeasuredNacelleActiveDamperAcceleration(const turbine turbine_id, int index_nacelle_active_damper);

/// <summary>
/// Sets the force demanded of the active damper, in N.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle_active_damper">  Index of nacelle active damper, starting at 0.</param>
/// <param name="force">  The force demanded of the active damper, in N.</param>
/// <param name="index_nacelle">  Index of nacelle, starting at 0.</param>
int SetDemandedNacelleActiveDamperForceOnNacelleN(const turbine turbine_id, int index_nacelle_active_damper, double force, int index_nacelle);

/// <summary>
/// Sets the force demanded of the active damper, in N.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_nacelle_active_damper">  Index of nacelle active damper, starting at 0.</param>
/// <param name="force">  The force demanded of the active damper, in N.</param>
int SetDemandedNacelleActiveDamperForce(const turbine turbine_id, int index_nacelle_active_damper, double force);

/// <summary>
/// Returns the number of blades on the hub.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetNumberOfBladesOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the number of blades on the hub.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetNumberOfBlades(const turbine turbine_id);

/// <summary>
/// Returns the current collective pitch angle for all blades on the rotor in rad/s, where the pitch control=COLLECTIVE and each blade's pitch actuator=POSITION.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetCollectivePitchAngleOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the current collective pitch angle for all blades on the rotor in rad/s, where the pitch control=COLLECTIVE and each blade's pitch actuator=POSITION.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetCollectivePitchAngle(const turbine turbine_id);

/// <summary>
/// Returns The demanded collective pitch for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=POSITION.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetDemandedCollectivePitchAngleOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns The demanded collective pitch for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=POSITION.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedCollectivePitchAngle(const turbine turbine_id);

/// <summary>
/// Sets the demanded collective pitch for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=POSITION.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="angle">  The angle of the blades relative to the rotor disc, in rad.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetDemandedCollectivePitchAngleOnHubN(const turbine turbine_id, double angle, int index_hub);

/// <summary>
/// Sets the demanded collective pitch for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=POSITION.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="angle">  The angle of the blades relative to the rotor disc, in rad.</param>
int SetDemandedCollectivePitchAngle(const turbine turbine_id, double angle);

/// <summary>
/// Returns The demanded collective pitch rate for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=RATE.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetDemandedCollectivePitchRateOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns The demanded collective pitch rate for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=RATE.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetDemandedCollectivePitchRate(const turbine turbine_id);

/// <summary>
/// Sets the demanded collective pitch rate for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=RATE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="rate">  The rate of change of the angle of the blades relative to the rotor disc, in rad/s.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetDemandedCollectivePitchRateOnHubN(const turbine turbine_id, double rate, int index_hub);

/// <summary>
/// Sets the demanded collective pitch rate for all blades on the rotor, where the pitch control=COLLECTIVE and each blade's pitch actuator=RATE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="rate">  The rate of change of the angle of the blades relative to the rotor disc, in rad/s.</param>
int SetDemandedCollectivePitchRate(const turbine turbine_id, double rate);

/// <summary>
/// Returns the current pitch control type: 0=COLLECTIVE, 1=INDIVIDUAL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetPitchControlOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the current pitch control type: 0=COLLECTIVE, 1=INDIVIDUAL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetPitchControl(const turbine turbine_id);

/// <summary>
/// Returns The current override status:    0=OFF, 1=ON
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetPitchOverrideStatusOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns The current override status:    0=OFF, 1=ON
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
int GetPitchOverrideStatus(const turbine turbine_id);

/// <summary>
/// Sets the current override status:    0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="override_status">  The current override status:    0=OFF, 1=ON</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetPitchOverrideStatusOnHubN(const turbine turbine_id, int override_status, int index_hub);

/// <summary>
/// Sets the current override status:    0=OFF, 1=ON.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="override_status">  The current override status:    0=OFF, 1=ON</param>
int SetPitchOverrideStatus(const turbine turbine_id, int override_status);

/// <summary>
/// Sets the demanded rate of change of the pitch angle of the blade during a safety system shutdown.  This is only relevant when the safety system is rate demand and pitch control=COLLECTIVE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="demanded_pitch_rate">  The demanded pitch rate of the blade to the rotor disc, in rad/s.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetSafetySystemDemandedCollectivePitchRateOnHubN(const turbine turbine_id, double demanded_pitch_rate, int index_hub);

/// <summary>
/// Sets the demanded rate of change of the pitch angle of the blade during a safety system shutdown.  This is only relevant when the safety system is rate demand and pitch control=COLLECTIVE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="demanded_pitch_rate">  The demanded pitch rate of the blade to the rotor disc, in rad/s.</param>
int SetSafetySystemDemandedCollectivePitchRate(const turbine turbine_id, double demanded_pitch_rate);

/// <summary>
/// Sets the demanded pitch motor torque of the blade during a safety system shutdown.  This is only relevant when the safety system is torque demand and pitch control=COLLECTIVE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="demanded_pitch_torque">  The demanded pitch motor torque of the blade to the rotor disc, in Nm</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetSafetySystemDemandedCollectivePitchTorqueOnHubN(const turbine turbine_id, double demanded_pitch_torque, int index_hub);

/// <summary>
/// Sets the demanded pitch motor torque of the blade during a safety system shutdown.  This is only relevant when the safety system is torque demand and pitch control=COLLECTIVE.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="demanded_pitch_torque">  The demanded pitch motor torque of the blade to the rotor disc, in Nm</param>
int SetSafetySystemDemandedCollectivePitchTorque(const turbine turbine_id, double demanded_pitch_torque);

/// <summary>
/// Returns the angle between the first blade's axis and vertical, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredRotorAzimuthAngleOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the angle between the first blade's axis and vertical, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredRotorAzimuthAngle(const turbine turbine_id);

/// <summary>
/// Returns the modelled speed of the flow over the hub, in m/s.  This is based on free flow at hub position - there is no modelling of actual nacelle anemometer or pitot tube.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetNominalHubFlowSpeedOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the modelled speed of the flow over the hub, in m/s.  This is based on free flow at hub position - there is no modelling of actual nacelle anemometer or pitot tube.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetNominalHubFlowSpeed(const turbine turbine_id);

/// <summary>
/// Returns the moment around the y-axis of the rotating hub's axis system, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredRotatingHubMyOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the moment around the y-axis of the rotating hub's axis system, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredRotatingHubMy(const turbine turbine_id);

/// <summary>
/// Returns the yawing moment on the hub around the nominal axis of the first blade, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredRotatingHubMzOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the yawing moment on the hub around the nominal axis of the first blade, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredRotatingHubMz(const turbine turbine_id);

/// <summary>
/// Returns the nodding/pitching moment around the y-axis, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredFixedHubMyOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the nodding/pitching moment around the y-axis, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredFixedHubMy(const turbine turbine_id);

/// <summary>
/// Returns the yawing moment around the vertical axis, in Nm..
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredFixedHubMzOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the yawing moment around the vertical axis, in Nm..
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredFixedHubMz(const turbine turbine_id);

/// <summary>
/// Returns the force acting on the hub in the direction of the shaft, in N
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredFixedHubFxOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the force acting on the hub in the direction of the shaft, in N
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredFixedHubFx(const turbine turbine_id);

/// <summary>
/// Returns the force acting on the hub in the direction normal to the shaft in the horizontal plane, in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredFixedHubFyOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the force acting on the hub in the direction normal to the shaft in the horizontal plane, in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredFixedHubFy(const turbine turbine_id);

/// <summary>
/// Returns the force acting on the hub in the vertical direction, in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredFixedHubFzOnHubN(const turbine turbine_id, int index_hub);

/// <summary>
/// Returns the force acting on the hub in the vertical direction, in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
double GetMeasuredFixedHubFz(const turbine turbine_id);

/// <summary>
/// Returns The demanded pitch angle of the blade.  This is only relevant when the pitch actuator=POSITION, and the pitch control=INDIVIDUAL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetDemandedPitchAngleOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns The demanded pitch angle of the blade.  This is only relevant when the pitch actuator=POSITION, and the pitch control=INDIVIDUAL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetDemandedPitchAngle(const turbine turbine_id, int index_blade);

/// <summary>
/// Sets the demanded pitch angle of the blade.  This is only relevant when the pitch actuator=POSITION, and the pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_angle">  The pitch of the blade to the rotor disc, in rad.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetDemandedPitchAngleOnHubN(const turbine turbine_id, int index_blade, double demanded_pitch_angle, int index_hub);

/// <summary>
/// Sets the demanded pitch angle of the blade.  This is only relevant when the pitch actuator=POSITION, and the pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_angle">  The pitch of the blade to the rotor disc, in rad.</param>
int SetDemandedPitchAngle(const turbine turbine_id, int index_blade, double demanded_pitch_angle);

/// <summary>
/// Returns The demanded rate of change of the pitch angle of the blade.  This is only relevant when the pitch actuator=RATE, and the pitch control=INDIVIDUAL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetDemandedPitchRateOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns The demanded rate of change of the pitch angle of the blade.  This is only relevant when the pitch actuator=RATE, and the pitch control=INDIVIDUAL.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetDemandedPitchRate(const turbine turbine_id, int index_blade);

/// <summary>
/// Sets the demanded rate of change of the pitch angle of the blade.  This is only relevant when the pitch actuator=RATE, and the pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_rate">  The pitch of the blade to the rotor disc, in rad/s.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetDemandedPitchRateOnHubN(const turbine turbine_id, int index_blade, double demanded_pitch_rate, int index_hub);

/// <summary>
/// Sets the demanded rate of change of the pitch angle of the blade.  This is only relevant when the pitch actuator=RATE, and the pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_rate">  The pitch of the blade to the rotor disc, in rad/s.</param>
int SetDemandedPitchRate(const turbine turbine_id, int index_blade, double demanded_pitch_rate);

/// <summary>
/// Sets the demanded rate of change of the pitch angle of the blade during a safety system shutdown.  This is only relevant when the safety system is rate demand and pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_rate">  The demanded pitch rate of the blade to the rotor disc, in rad/s.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetSafetySystemDemandedPitchRateOnHubN(const turbine turbine_id, int index_blade, double demanded_pitch_rate, int index_hub);

/// <summary>
/// Sets the demanded rate of change of the pitch angle of the blade during a safety system shutdown.  This is only relevant when the safety system is rate demand and pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_rate">  The demanded pitch rate of the blade to the rotor disc, in rad/s.</param>
int SetSafetySystemDemandedPitchRate(const turbine turbine_id, int index_blade, double demanded_pitch_rate);

/// <summary>
/// Sets the demanded pitch motor torque of the blade during a safety system shutdown.  This is only relevant when the safety system is torque demand and pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_torque">  The demanded pitch motor torque of the blade to the rotor disc, in Nm</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetSafetySystemDemandedPitchTorqueOnHubN(const turbine turbine_id, int index_blade, double demanded_pitch_torque, int index_hub);

/// <summary>
/// Sets the demanded pitch motor torque of the blade during a safety system shutdown.  This is only relevant when the safety system is torque demand and pitch control=INDIVIDUAL.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="demanded_pitch_torque">  The demanded pitch motor torque of the blade to the rotor disc, in Nm</param>
int SetSafetySystemDemandedPitchTorque(const turbine turbine_id, int index_blade, double demanded_pitch_torque);

/// <summary>
/// The status of whether either the lower or upper limit switch has been tripped in the pitch actuator
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int IsPitchLimitSwitchTrippedOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// The status of whether either the lower or upper limit switch has been tripped in the pitch actuator
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
int IsPitchLimitSwitchTripped(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns Set the measured pitch angle from the pitch hardware, so that the pitch actuator model tracks it.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetPitchHardwareAngleOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns Set the measured pitch angle from the pitch hardware, so that the pitch actuator model tracks it.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetPitchHardwareAngle(const turbine turbine_id, int index_blade);

/// <summary>
/// Sets set the measured pitch angle from the pitch hardware, so that the pitch actuator model tracks it.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_hardware_angle">  The measured position of the pitch hardware, in rad.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetPitchHardwareAngleOnHubN(const turbine turbine_id, int index_blade, double pitch_hardware_angle, int index_hub);

/// <summary>
/// Sets set the measured pitch angle from the pitch hardware, so that the pitch actuator model tracks it.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_hardware_angle">  The measured position of the pitch hardware, in rad.</param>
int SetPitchHardwareAngle(const turbine turbine_id, int index_blade, double pitch_hardware_angle);

/// <summary>
/// Returns Set the measured pitch rate from the pitch hardware, so that the pitch actuator model tracks it.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetPitchHardwareRateOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns Set the measured pitch rate from the pitch hardware, so that the pitch actuator model tracks it.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetPitchHardwareRate(const turbine turbine_id, int index_blade);

/// <summary>
/// Sets set the measured pitch rate from the pitch hardware, so that the pitch actuator model tracks it.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_hardware_rate">  The measured rate of the pitch hardware, in rad/s.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetPitchHardwareRateOnHubN(const turbine turbine_id, int index_blade, double pitch_hardware_rate, int index_hub);

/// <summary>
/// Sets set the measured pitch rate from the pitch hardware, so that the pitch actuator model tracks it.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_hardware_rate">  The measured rate of the pitch hardware, in rad/s.</param>
int SetPitchHardwareRate(const turbine turbine_id, int index_blade, double pitch_hardware_rate);

/// <summary>
/// Returns the reference blade angle for when the turbine is operating below its rated flow speed, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetBelowRatedPitchAngleSetPointOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the reference blade angle for when the turbine is operating below its rated flow speed, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetBelowRatedPitchAngleSetPoint(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the minimum pitch angle allowed on the blade, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMinimumPitchAngleOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the minimum pitch angle allowed on the blade, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMinimumPitchAngle(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the maximum pitch angle allowed on the blade, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMaximumPitchAngleOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the maximum pitch angle allowed on the blade, in rad.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMaximumPitchAngle(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the minimum pitch rate allowed on the blade, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMinimumPitchRateOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the minimum pitch rate allowed on the blade, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMinimumPitchRate(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the maximum pitch rate allowed on the blade, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMaximumPitchRateOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the maximum pitch rate allowed on the blade, in rad/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMaximumPitchRate(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the pitch actuator type: 0=POSITION, 1=RATE
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetPitchActuatorTypeOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the pitch actuator type: 0=POSITION, 1=RATE
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
int GetPitchActuatorType(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the current pitch angle of the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchAngleOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the current pitch angle of the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchAngle(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the current rate of change of the pitch angle of the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchRateOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the current rate of change of the pitch angle of the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchRate(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the current pitch actuator torque, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchActuatorTorqueOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the current pitch actuator torque, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchActuatorTorque(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the out-of-plane bending moment, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeOutOfPlaneBendingMomentOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the out-of-plane bending moment, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredBladeOutOfPlaneBendingMoment(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the in-plane bending moment, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeInPlaneBendingMomentOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the in-plane bending moment, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredBladeInPlaneBendingMoment(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the pitch bearing's Mz, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchBearingMzOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the pitch bearing's Mz, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchBearingMz(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the pitch bearing's friction, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchBearingFrictionOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the pitch bearing's friction, in Nm.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchBearingFriction(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the pitch bearing's radial force, i.e. sqrt(Fx2+Fy2), in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchBearingRadialForceOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the pitch bearing's radial force, i.e. sqrt(Fx2+Fy2), in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchBearingRadialForce(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the pitch bearing's axial force, i.e. Fz, in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredPitchBearingAxialForceOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the pitch bearing's axial force, i.e. Fz, in N.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
double GetMeasuredPitchBearingAxialForce(const turbine turbine_id, int index_blade);

/// <summary>
/// Sets the actual pitch position of the blade, based on the hardware measurements.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_position">  The pitch of the blade to the rotor disc, in rad.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetHardwarePitchPositionOnHubN(const turbine turbine_id, int index_blade, double pitch_position, int index_hub);

/// <summary>
/// Sets the actual pitch position of the blade, based on the hardware measurements.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_position">  The pitch of the blade to the rotor disc, in rad.</param>
int SetHardwarePitchPosition(const turbine turbine_id, int index_blade, double pitch_position);

/// <summary>
/// Sets the actual pitch rate of the blade, based on the hardware measurements.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_rate">  The pitch rate of the blade, in rad.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetHardwarePitchRateOnHubN(const turbine turbine_id, int index_blade, double pitch_rate, int index_hub);

/// <summary>
/// Sets the actual pitch rate of the blade, based on the hardware measurements.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="pitch_rate">  The pitch rate of the blade, in rad.</param>
int SetHardwarePitchRate(const turbine turbine_id, int index_blade, double pitch_rate);

/// <summary>
/// Returns the number of ailerons on the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetNumberOfAileronsOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the number of ailerons on the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
int GetNumberOfAilerons(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the number of strain gauges on the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetNumberOfBladeStrainGaugesOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the number of strain gauges on the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
int GetNumberOfBladeStrainGauges(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns the number of accelerometers on the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int GetNumberOfBladeAccelerometersOnHubN(const turbine turbine_id, int index_blade, int index_hub);

/// <summary>
/// Returns the number of accelerometers on the blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
int GetNumberOfBladeAccelerometers(const turbine turbine_id, int index_blade);

/// <summary>
/// Returns The demanded deployment angle of the aileron.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_aileron">  Index of aileron, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetDemandedAileronAngleOnHubN(const turbine turbine_id, int index_blade, int index_aileron, int index_hub);

/// <summary>
/// Returns The demanded deployment angle of the aileron.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_aileron">  Index of aileron, starting at 0.</param>
double GetDemandedAileronAngle(const turbine turbine_id, int index_blade, int index_aileron);

/// <summary>
/// Sets the demanded deployment angle of the aileron.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_aileron">  Index of aileron, starting at 0.</param>
/// <param name="demanded_angle">  The deployment angle of the aileron, in rad.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
int SetDemandedAileronAngleOnHubN(const turbine turbine_id, int index_blade, int index_aileron, double demanded_angle, int index_hub);

/// <summary>
/// Sets the demanded deployment angle of the aileron.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_aileron">  Index of aileron, starting at 0.</param>
/// <param name="demanded_angle">  The deployment angle of the aileron, in rad.</param>
int SetDemandedAileronAngle(const turbine turbine_id, int index_blade, int index_aileron, double demanded_angle);

/// <summary>
/// The distance along the span the strain gauge is positioned.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_strain_gauge">  Index of blade strain gauge, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetBladeStrainGaugeDistanceOnHubN(const turbine turbine_id, int index_blade, int index_blade_strain_gauge, int index_hub);

/// <summary>
/// The distance along the span the strain gauge is positioned.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_strain_gauge">  Index of blade strain gauge, starting at 0.</param>
double GetBladeStrainGaugeDistance(const turbine turbine_id, int index_blade, int index_blade_strain_gauge);

/// <summary>
/// Returns the angle of the strain gauge.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_strain_gauge">  Index of blade strain gauge, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetBladeStrainGaugeAngleOnHubN(const turbine turbine_id, int index_blade, int index_blade_strain_gauge, int index_hub);

/// <summary>
/// Returns the angle of the strain gauge.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_strain_gauge">  Index of blade strain gauge, starting at 0.</param>
double GetBladeStrainGaugeAngle(const turbine turbine_id, int index_blade, int index_blade_strain_gauge);

/// <summary>
/// Returns the moment in the direction specified by the strain gauge's angle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_strain_gauge">  Index of blade strain gauge, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeStrainGaugeMOnHubN(const turbine turbine_id, int index_blade, int index_blade_strain_gauge, int index_hub);

/// <summary>
/// Returns the moment in the direction specified by the strain gauge's angle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_strain_gauge">  Index of blade strain gauge, starting at 0.</param>
double GetMeasuredBladeStrainGaugeM(const turbine turbine_id, int index_blade, int index_blade_strain_gauge);

/// <summary>
/// The distance along the span the accelerometer is positioned.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetBladeAccelerometerDistanceOnHubN(const turbine turbine_id, int index_blade, int index_blade_accelerometer, int index_hub);

/// <summary>
/// The distance along the span the accelerometer is positioned.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
double GetBladeAccelerometerDistance(const turbine turbine_id, int index_blade, int index_blade_accelerometer);

/// <summary>
/// Returns the acceleration in the direction specified by the accelerometer's angle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationOnHubN(const turbine turbine_id, int index_blade, int index_blade_accelerometer, int index_hub);

/// <summary>
/// Returns the acceleration in the direction specified by the accelerometer's angle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
double GetMeasuredBladeAccelerometerAcceleration(const turbine turbine_id, int index_blade, int index_blade_accelerometer);

/// <summary>
/// Returns the accelleration in the X-axis direction (along the component's  axis for a multi-member structure or blade, or the turbine's X-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationXOnHubN(const turbine turbine_id, int index_blade, int index_blade_accelerometer, int index_hub);

/// <summary>
/// Returns the accelleration in the X-axis direction (along the component's  axis for a multi-member structure or blade, or the turbine's X-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationX(const turbine turbine_id, int index_blade, int index_blade_accelerometer);

/// <summary>
/// Returns the acceleration in the Y-axis direction (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Y-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationYOnHubN(const turbine turbine_id, int index_blade, int index_blade_accelerometer, int index_hub);

/// <summary>
/// Returns the acceleration in the Y-axis direction (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Y-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationY(const turbine turbine_id, int index_blade, int index_blade_accelerometer);

/// <summary>
/// Returns the acceleration in the Z-axis direction (perpendicular to the component's  axis for a multi-member structure or blade, or the turbine's Z-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
/// <param name="index_hub">  Index of hub, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationZOnHubN(const turbine turbine_id, int index_blade, int index_blade_accelerometer, int index_hub);

/// <summary>
/// Returns the acceleration in the Z-axis direction (perpendicular to the component's  axis for a multi-member structure or blade, or the turbine's Z-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_blade">  Index of blade, starting at 0.</param>
/// <param name="index_blade_accelerometer">  Index of blade accelerometer, starting at 0.</param>
double GetMeasuredBladeAccelerometerAccelerationZ(const turbine turbine_id, int index_blade, int index_blade_accelerometer);

/// <summary>
/// Sets the value to be logged in this timestep.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_log_value">  Index of log value, starting at 0.</param>
/// <param name="log_value">  The value to be logged.</param>
int SetLoggingValue(const turbine turbine_id, int index_log_value, double log_value);

/// <summary>
/// Returns the name of the logging value.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_log_value">  Index of log value, starting at 0.</param>
const char* GetLoggingName(const turbine turbine_id, int index_log_value);

/// <summary>
/// Returns the units of the logging value.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_log_value">  Index of log value, starting at 0.</param>
const char* GetLoggingUnits(const turbine turbine_id, int index_log_value);

/// <summary>
/// Returns the index of the structural member on which the strain gauge is located.  This is the same as that used in the Support Structure definition screen, and does not necessarily start at 0 or 1.  For monopile towers, seeGetTurbineStrainGaugeTowerHeight.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetTurbineStrainGaugeMemberIndex(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// The fraction along the structural member that the strain gauge is located: 0.0 = end 1, 1.0 = end 2.  For monopile towers, see GetTurbineStrainGaugeTowerHeight.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetTurbineStrainGaugeLengthFraction(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the height up the tower the strain gauge is located.  This is only valid for monopile towers, and will be -666.0 for multi-member towers.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetTurbineStrainGaugeTowerHeight(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the moment about the X-axis (the torsion about the component's axis for a multi-member structure or blade, or the turbine's X-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetMeasuredTurbineStrainGaugeMx(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the moment about the Y-axis (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Y-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetMeasuredTurbineStrainGaugeMy(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the moment about the Z-axis (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Z-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetMeasuredTurbineStrainGaugeMz(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the load in the X-axis direction (along the component's axis for a multi-member structure or blade, or the turbine's X-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetMeasuredTurbineStrainGaugeFx(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the load in the Y-axis direction (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Y-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetMeasuredTurbineStrainGaugeFy(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the load in the Z-axis direction (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Z-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_strain_gauge">  Index of turbine strain gauge, starting at 0.</param>
double GetMeasuredTurbineStrainGaugeFz(const turbine turbine_id, int index_turbine_strain_gauge);

/// <summary>
/// Returns the index of the structural member on which the accelerometer is located.  This is the same as that used in the Support Structure definition screen, and does not necessarily start at 0 or 1.  For monopile towers, see GetTurbineAccelerometerTowerHeight.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_accelerometer">  Index of turbine accelerometer, starting at 0.</param>
double GetTurbineAccelerometerMemberIndex(const turbine turbine_id, int index_turbine_accelerometer);

/// <summary>
/// The fraction along the structural member that the accelerometer is located: 0.0 = end 1, 1.0 = end 2.  For monopile towers, see GetTurbineAccelerometerTowerHeight.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_accelerometer">  Index of turbine accelerometer, starting at 0.</param>
double GetTurbineAccelerometerLengthFraction(const turbine turbine_id, int index_turbine_accelerometer);

/// <summary>
/// Returns the height up the tower the acceleraometer is located.  This is only valid for monopile towers, and will be set to a negative number for multi-member towers.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_accelerometer">  Index of turbine accelerometer, starting at 0.</param>
double GetTurbineAccelerometerTowerHeight(const turbine turbine_id, int index_turbine_accelerometer);

/// <summary>
/// Returns the accelleration in the X-axis direction (along the component's  axis for a multi-member structure or blade, or the turbine's X-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_accelerometer">  Index of turbine accelerometer, starting at 0.</param>
double GetMeasuredTurbineAccelerometerAccelerationX(const turbine turbine_id, int index_turbine_accelerometer);

/// <summary>
/// Returns the acceleration in the Y-axis direction (perpendicular to the component's axis for a multi-member structure or blade, or the turbine's Y-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_accelerometer">  Index of turbine accelerometer, starting at 0.</param>
double GetMeasuredTurbineAccelerometerAccelerationY(const turbine turbine_id, int index_turbine_accelerometer);

/// <summary>
/// Returns the acceleration in the Z-axis direction (perpendicular to the component's  axis for a multi-member structure or blade, or the turbine's Z-axis for a monopile tower).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_accelerometer">  Index of turbine accelerometer, starting at 0.</param>
double GetMeasuredTurbineAccelerometerAccelerationZ(const turbine turbine_id, int index_turbine_accelerometer);

/// <summary>
/// Returns the index of the structural member on which the active damper is located.  This is the same as that used in the Support Structure definition screen, and does not necessarily start at 0 or 1.  For monopile towers, see GetTurbineActiveDamperTowerHeight.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_active_damper">  Index of turbine active damper, starting at 0.</param>
double GetTurbineActiveDamperMemberIndex(const turbine turbine_id, int index_turbine_active_damper);

/// <summary>
/// Returns the acceleration being measured by the active damper, in m/s2.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_active_damper">  Index of turbine active damper, starting at 0.</param>
double GetMeasuredTurbineActiveDamperAcceleration(const turbine turbine_id, int index_turbine_active_damper);

/// <summary>
/// Sets the force demanded of the active damper, in N.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_turbine_active_damper">  Index of turbine active damper, starting at 0.</param>
/// <param name="force">  The force demanded of the active damper, in N.</param>
int SetDemandedTurbineActiveDamperForce(const turbine turbine_id, int index_turbine_active_damper, double force);

/// <summary>
/// Returns returns the nominal X coordinate of the LIDAR beam's origin, in the coordinates of the component to which it is attached.  This is nominal as it does not include the distortion of the component during the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
double GetNominalLidarBeamPositionX(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns returns the nominal Y coordinate of the LIDAR beam's origin, in the coordinates of the component to which it is attached.  This is nominal as it does not include the distortion of the component during the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
double GetNominalLidarBeamPositionY(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns returns the nominal Z coordinate of the LIDAR beam's origin, in the coordinates of the component to which it is attached.  This is nominal as it does not include the distortion of the component during the simulation.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
double GetNominalLidarBeamPositionZ(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns an integer representing the mounting of the LIDAR:  0=Support Structure or Ground;  1=Nacelle;  2=Hub;  3=Blade
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetLidarBeamMounting(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns returns the index (starting at 0) of the rotor the Lidar is mounted on, or -1 if it is not mounted on a blade, hub or nacelle.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetLidarBeamRotorIndex(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns returns the index (starting at 0) of the blade the Lidar is mounted on, or -1 if it is not mounted on a blade.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetLidarBeamBladeIndex(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Adds a focal point, and returns the new number of focal points.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int AddLidarBeamFocalPoint(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Removes a focal point, and returns the new number of focal points.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="index">  The index of the focal point to remove.</param>
int RemoveLidarBeamFocalPoint(const turbine turbine_id, int index_lidar_beam, int index);

/// <summary>
/// Returns the number of focal points.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetNumberOfLidarBeamFocalPoints(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns the control method for the Lidar beam: 0=External Controller; 1=Bladed (circular pattern); 2=Bladed rosette pattern).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetLidarBeamControl(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns the update mechanism for the beam:
///    GH_DISCON_LIDAR_BEAM_UPDATE_ON_TIMESTEP (0)=on every Lidar timestep
///    GH_DISCON_LIDAR_BEAM_UPDATE_WAITING (1)=on demand (currently waiting)
///    GH_DISCON_LIDAR_BEAM_UPDATE_REQUESTED (2)=on demand (already requested).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetLidarBeamUpdate(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Requests an update for the beam (only available if the Lidar update type = GH_DISCON_LIDAR_BEAM_UPDATE_WAITING).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int RequestLidarBeamUpdate(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Sets the control axes for the Lidar beam: 0=CARTESIAN (using angles Y and Z), 1=SPHERICAL (using offset and azimuth).  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="lidar_beam_control_coordinate_system_int">  The control axes for the Lidar beam: 0=CARTESIAN (using angles Y and Z), 1=SPHERICAL (using offset and azimuth), in .</param>
int SetLidarBeamControlCoordinateSystem(const turbine turbine_id, int index_lidar_beam, int lidar_beam_control_coordinate_system_int);

/// <summary>
/// Returns the control axes for the Lidar beam: 0=CARTESIAN (using angles Y and Z), 1=SPHERICAL (using offset and azimuth).
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetLidarBeamControlCoordinateSystem(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns whether the Lidar beam is currently occluded by a blade: 0=NO, 1=YES.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
int GetIsLidarBeamCurrentlyOccluded(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Returns The Lidar beam's demanded angle in the XZ plane (i.e. rotating around the Y axis).  Only valid when the beam control is CARTESIAN.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
double GetDemandedLidarBeamAngleY(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Sets the Lidar beam's demanded angle in the XZ plane (i.e. rotating around the Y axis).  Only valid when the beam control is CARTESIAN.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="angle">  The angle to the x-axis, in rad.</param>
int SetDemandedLidarBeamAngleY(const turbine turbine_id, int index_lidar_beam, double angle);

/// <summary>
/// Returns The Lidar beam's demanded angle in the XY plane (i.e. rotating around the Z axis).  Only valid when the beam control is CARTESIAN.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
double GetDemandedLidarBeamAngleZ(const turbine turbine_id, int index_lidar_beam);

/// <summary>
/// Sets the Lidar beam's demanded angle in the XY plane (i.e. rotating around the Z axis).  Only valid when the beam control is CARTESIAN.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="angle">  The angle to the x-axis, in rad.</param>
int SetDemandedLidarBeamAngleZ(const turbine turbine_id, int index_lidar_beam, double angle);

/// <summary>
/// Returns the measured velocity of the Lidar station in line-of-site, in m/s.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="index_lidar_beam_focal_point">  Index of lidar beam focal point, starting at 0.</param>
double GetMeasuredLidarBeamFocalPointVelocity(const turbine turbine_id, int index_lidar_beam, int index_lidar_beam_focal_point);

/// <summary>
/// Returns The distance to the focal point of the Lidar, along line-of-sight.  This is the distance from the Lidar position at which the flow velocity is measured.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="index_lidar_beam_focal_point">  Index of lidar beam focal point, starting at 0.</param>
double GetDemandedLidarBeamFocalPointFocalDistance(const turbine turbine_id, int index_lidar_beam, int index_lidar_beam_focal_point);

/// <summary>
/// Sets the distance to the focal point of the Lidar, along line-of-sight.  This is the distance from the Lidar position at which the flow velocity is measured.  Returns 0 for success, and -1 for an error.
/// </summary>
/// <param name="turbine_id">  The id of the turbine model that is provided by the simulation.  This should be provided as the first argument to any function call to the simulation.</param>
/// <param name="index_lidar_beam">  Index of lidar beam, starting at 0.</param>
/// <param name="index_lidar_beam_focal_point">  Index of lidar beam focal point, starting at 0.</param>
/// <param name="focal_distance">  The distance to the focal point, in m.</param>
int SetDemandedLidarBeamFocalPointFocalDistance(const turbine turbine_id, int index_lidar_beam, int index_lidar_beam_focal_point, double focal_distance);


#ifdef __cplusplus
};
}
#endif    // End of __cplusplus

#endif    // End of EXTERNAL_CONTROLLER_API_H
